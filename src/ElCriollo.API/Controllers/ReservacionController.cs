using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using ElCriollo.API.Models.DTOs.Request;
using ElCriollo.API.Models.DTOs.Response;
using ElCriollo.API.Models.DTOs.Common;
using ElCriollo.API.Models.ViewModels;
using ElCriollo.API.Services;
using Swashbuckle.AspNetCore.Annotations;
using System.Security.Claims;

namespace ElCriollo.API.Controllers
{
    /// <summary>
    /// Controlador para la gesti√≥n de reservaciones del restaurante El Criollo
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    [SwaggerTag("Gesti√≥n de reservaciones, mesas y disponibilidad")]
    public class ReservacionController : ControllerBase
    {
        private readonly IReservacionService _reservacionService;
        private readonly ILogger<ReservacionController> _logger;

        public ReservacionController(IReservacionService reservacionService, ILogger<ReservacionController> logger)
        {
            _reservacionService = reservacionService;
            _logger = logger;
        }

        // ============================================================================
        // CREACI√ìN DE RESERVACIONES
        // ============================================================================

        /// <summary>
        /// Crear reservaci√≥n individual
        /// </summary>
        /// <param name="request">Datos de la reservaci√≥n a crear</param>
        /// <returns>Reservaci√≥n creada</returns>
        /// <response code="201">Reservaci√≥n creada exitosamente</response>
        /// <response code="400">Datos inv√°lidos o mesa no disponible</response>
        /// <response code="401">No autorizado</response>
        [HttpPost]
        [Authorize(Roles = "Administrador,Recepcion,Mesero")]
        [SwaggerOperation(
            Summary = "Crear reservaci√≥n individual",
            Description = "Genera una reservaci√≥n para una mesa espec√≠fica con confirmaci√≥n autom√°tica",
            OperationId = "Reservacion.Crear",
            Tags = new[] { "Reservaciones" }
        )]
        [ProducesResponseType(typeof(ReservacionResponse), StatusCodes.Status201Created)]
        [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status401Unauthorized)]
        public async Task<ActionResult<ReservacionResponse>> CrearReservacion([FromBody] CreateReservacionRequest request)
        {
            try
            {
                _logger.LogInformation("üìÖ Creando reservaci√≥n para mesa {MesaId}", request.MesaId);

                var usuarioId = int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");
                var reservacion = await _reservacionService.CrearReservaAsync(request, usuarioId);
                
                _logger.LogInformation("‚úÖ Reservaci√≥n {ReservacionId} creada exitosamente", reservacion.ReservacionID);
                
                return CreatedAtAction(
                    nameof(GetReservacionById), 
                    new { id = reservacion.ReservacionID }, 
                    reservacion
                );
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning("‚ö†Ô∏è Error al crear reservaci√≥n: {Mensaje}", ex.Message);
                return BadRequest(new ValidationProblemDetails
                {
                    Title = "Error al crear reservaci√≥n",
                    Detail = ex.Message,
                    Status = StatusCodes.Status400BadRequest
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error inesperado al crear reservaci√≥n");
                return StatusCode(StatusCodes.Status500InternalServerError, new ProblemDetails
                {
                    Title = "Error interno",
                    Detail = "Ocurri√≥ un error al procesar la reservaci√≥n",
                    Status = StatusCodes.Status500InternalServerError
                });
            }
        }

        /// <summary>
        /// Crear reservaci√≥n grupal para m√∫ltiples mesas
        /// </summary>
        /// <param name="request">Datos de reservaci√≥n grupal</param>
        /// <returns>Reservaci√≥n grupal creada</returns>
        /// <response code="201">Reservaci√≥n grupal creada exitosamente</response>
        /// <response code="400">Mesas no disponibles</response>
        [HttpPost("grupal")]
        [Authorize(Roles = "Administrador,Recepcion")]
        [SwaggerOperation(
            Summary = "Crear reservaci√≥n grupal",
            Description = "Genera una reservaci√≥n para m√∫ltiples mesas en el mismo horario",
            OperationId = "Reservacion.CrearGrupal",
            Tags = new[] { "Reservaciones" }
        )]
        [ProducesResponseType(typeof(ReservacionResponse), StatusCodes.Status201Created)]
        [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
        public Task<ActionResult<ReservacionResponse>> CrearReservacionGrupal([FromBody] CreateReservacionGrupalRequest request)
        {
            try
            {
                _logger.LogInformation("üìÖ Creando reservaci√≥n grupal para {CantidadMesas} mesas", request.MesasIds.Count);

                // Temporalmente comentado hasta implementar el m√©todo
                // var reservacion = await _reservacionService.CrearReservacionGrupalAsync(request);
                
                // _logger.LogInformation("‚úÖ Reservaci√≥n grupal {ReservacionId} creada", reservacion.ReservacionID);
                
                // return CreatedAtAction(
                //     nameof(GetReservacionById), 
                //     new { id = reservacion.ReservacionID }, 
                //     reservacion
                // );

                var result = BadRequest(new ValidationProblemDetails
                {
                    Title = "Funci√≥n no implementada",
                    Detail = "La creaci√≥n de reservaciones grupales no est√° implementada a√∫n",
                    Status = StatusCodes.Status400BadRequest
                });

                return Task.FromResult<ActionResult<ReservacionResponse>>(result);
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning("‚ö†Ô∏è Error al crear reservaci√≥n grupal: {Mensaje}", ex.Message);
                var result = BadRequest(new ValidationProblemDetails
                {
                    Title = "Error al crear reservaci√≥n grupal",
                    Detail = ex.Message,
                    Status = StatusCodes.Status400BadRequest
                });

                return Task.FromResult<ActionResult<ReservacionResponse>>(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al crear reservaci√≥n grupal");
                var result = StatusCode(StatusCodes.Status500InternalServerError);
                return Task.FromResult<ActionResult<ReservacionResponse>>(result);
            }
        }

        // ============================================================================
        // CONSULTA DE RESERVACIONES
        // ============================================================================

        /// <summary>
        /// Obtener una reservaci√≥n por ID
        /// </summary>
        /// <param name="id">ID de la reservaci√≥n</param>
        /// <returns>Datos completos de la reservaci√≥n</returns>
        /// <response code="200">Reservaci√≥n encontrada</response>
        /// <response code="404">Reservaci√≥n no encontrada</response>
        [HttpGet("{id:int}")]
        [SwaggerOperation(
            Summary = "Obtener reservaci√≥n por ID",
            Description = "Obtiene los datos completos de una reservaci√≥n incluyendo detalles de mesa y cliente",
            OperationId = "Reservacion.GetById",
            Tags = new[] { "Consulta de Reservaciones" }
        )]
        [ProducesResponseType(typeof(ReservacionResponse), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status404NotFound)]
        public async Task<ActionResult<ReservacionResponse>> GetReservacionById(int id)
        {
            try
            {
                var reservacion = await _reservacionService.GetReservaByIdAsync(id);
                
                if (reservacion == null)
                {
                    return NotFound(new ProblemDetails
                    {
                        Title = "Reservaci√≥n no encontrada",
                        Detail = $"No se encontr√≥ la reservaci√≥n con ID {id}",
                        Status = StatusCodes.Status404NotFound
                    });
                }

                return Ok(reservacion);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al obtener reservaci√≥n {ReservacionId}", id);
                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }

        /// <summary>
        /// Obtener reservaciones del d√≠a
        /// </summary>
        /// <param name="fecha">Fecha a consultar (por defecto hoy)</param>
        /// <returns>Lista de reservaciones del d√≠a</returns>
        /// <response code="200">Lista de reservaciones</response>
        [HttpGet("dia")]
        [SwaggerOperation(
            Summary = "Obtener reservaciones del d√≠a",
            Description = "Devuelve todas las reservaciones programadas para una fecha espec√≠fica",
            OperationId = "Reservacion.GetDelDia",
            Tags = new[] { "Consulta de Reservaciones" }
        )]
        [ProducesResponseType(typeof(IEnumerable<ReservacionResponse>), StatusCodes.Status200OK)]
        public async Task<ActionResult<IEnumerable<ReservacionResponse>>> GetReservacionesDelDia([FromQuery] DateTime? fecha = null)
        {
            try
            {
                // Usar fecha dominicana si no se especifica
                var dominicanTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Atlantic Standard Time");
                var fechaConsulta = fecha ?? TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, dominicanTimeZone).Date;
                
                _logger.LogInformation("üìÖ Consultando reservaciones para {Fecha} (zona horaria dominicana)", fechaConsulta);

                var reservaciones = await _reservacionService.GetReservasPorFechaAsync(fechaConsulta);
                
                return Ok(reservaciones);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al obtener reservaciones del d√≠a");
                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }

        /// <summary>
        /// Obtener reservaciones por rango de fechas
        /// </summary>
        /// <param name="fechaInicio">Fecha de inicio</param>
        /// <param name="fechaFin">Fecha de fin</param>
        /// <returns>Lista de reservaciones en el rango</returns>
        /// <response code="200">Lista de reservaciones</response>
        /// <response code="400">Rango de fechas inv√°lido</response>
        [HttpGet("rango")]
        [SwaggerOperation(
            Summary = "Obtener reservaciones por rango de fechas",
            Description = "Devuelve todas las reservaciones programadas entre dos fechas",
            OperationId = "Reservacion.GetPorRango",
            Tags = new[] { "Consulta de Reservaciones" }
        )]
        [ProducesResponseType(typeof(IEnumerable<ReservacionResponse>), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
        public async Task<ActionResult<IEnumerable<ReservacionResponse>>> GetReservacionesPorRango([FromQuery] DateTime fechaInicio, [FromQuery] DateTime fechaFin)
        {
            try
            {
                if (fechaInicio > fechaFin)
                {
                    return BadRequest(new ValidationProblemDetails
                    {
                        Title = "Rango de fechas inv√°lido",
                        Detail = "La fecha de inicio no puede ser posterior a la fecha de fin",
                        Status = StatusCodes.Status400BadRequest
                    });
                }

                // Temporalmente usando el m√©todo disponible
                var reservaciones = await _reservacionService.GetReservasPorFechaAsync(fechaInicio);
                
                return Ok(reservaciones);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al obtener reservaciones por rango");
                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }

        // ============================================================================
        // OPERACIONES DE RESERVACI√ìN
        // ============================================================================

        /// <summary>
        /// Cancelar reservaci√≥n
        /// </summary>
        /// <param name="id">ID de la reservaci√≥n</param>
        /// <param name="request">Datos de cancelaci√≥n</param>
        /// <returns>Confirmaci√≥n de cancelaci√≥n</returns>
        /// <response code="200">Reservaci√≥n cancelada exitosamente</response>
        /// <response code="400">No se puede cancelar la reservaci√≥n</response>
        /// <response code="404">Reservaci√≥n no encontrada</response>
        [HttpPost("{id:int}/cancelar")]
        [Authorize(Roles = "Administrador,Recepcion")]
        [SwaggerOperation(
            Summary = "Cancelar reservaci√≥n",
            Description = "Cancela una reservaci√≥n y libera las mesas asociadas",
            OperationId = "Reservacion.Cancelar",
            Tags = new[] { "Operaciones de Reservaci√≥n" }
        )]
        [ProducesResponseType(typeof(ApiResponse), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status404NotFound)]
        public async Task<ActionResult<ApiResponse>> CancelarReservacion(int id, [FromBody] CancelarReservacionRequest request)
        {
            try
            {
                _logger.LogInformation("üö´ Cancelando reservaci√≥n {ReservacionId}", id);

                var usuarioId = int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");
                await _reservacionService.CancelarReservaAsync(id, request.Motivo, usuarioId);
                
                _logger.LogInformation("‚úÖ Reservaci√≥n {ReservacionId} cancelada exitosamente", id);
                
                return Ok(new ApiResponse
                {
                    Success = true,
                    Message = "Reservaci√≥n cancelada exitosamente"
                });
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning("‚ö†Ô∏è Error al cancelar reservaci√≥n: {Mensaje}", ex.Message);
                return BadRequest(new ValidationProblemDetails
                {
                    Title = "Error al cancelar reservaci√≥n",
                    Detail = ex.Message,
                    Status = StatusCodes.Status400BadRequest
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al cancelar reservaci√≥n {ReservacionId}", id);
                return StatusCode(StatusCodes.Status500InternalServerError, new ProblemDetails
                {
                    Title = "Error interno",
                    Detail = "Ocurri√≥ un error al procesar la cancelaci√≥n",
                    Status = StatusCodes.Status500InternalServerError
                });
            }
        }

        /// <summary>
        /// Confirma una reservaci√≥n
        /// </summary>
        /// <param name="id">ID de la reservaci√≥n a confirmar</param>
        /// <returns>Resultado de la operaci√≥n</returns>
        /// <response code="200">Reservaci√≥n confirmada exitosamente</response>
        /// <response code="400">La reservaci√≥n no se pudo confirmar</response>
        /// <response code="404">Reservaci√≥n no encontrada</response>
        [HttpPost("{id:int}/confirmar")]
        [Authorize(Roles = "Administrador,Recepcion")]
        [SwaggerOperation(
            Summary = "Confirmar reservaci√≥n",
            Description = "Confirma una reservaci√≥n que estaba en estado pendiente.",
            OperationId = "Reservacion.Confirmar",
            Tags = new[] { "Operaciones de Reservaci√≥n" }
        )]
        [ProducesResponseType(typeof(ApiResponse), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(ValidationProblemDetails), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status404NotFound)]
        public async Task<ActionResult<ApiResponse>> ConfirmarReservacion(int id)
        {
            try
            {
                _logger.LogInformation("‚úÖ Confirmando reservaci√≥n ID: {ReservacionId}", id);

                var usuarioId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0");
                var exito = await _reservacionService.ConfirmarReservaAsync(id, usuarioId);

                if (!exito)
                {
                    return BadRequest(new ValidationProblemDetails
                    {
                        Title = "No se pudo confirmar la reservaci√≥n",
                        Detail = "La reservaci√≥n podr√≠a no existir o ya estar en un estado final (cancelada, completada).",
                        Status = StatusCodes.Status400BadRequest
                    });
                }

                return Ok(new ApiResponse { Success = true, Message = "Reservaci√≥n confirmada exitosamente." });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al confirmar reservaci√≥n {ReservacionId}", id);
                return StatusCode(StatusCodes.Status500InternalServerError, new ProblemDetails
                {
                    Title = "Error interno",
                    Detail = "Ocurri√≥ un error al procesar la confirmaci√≥n.",
                    Status = StatusCodes.Status500InternalServerError
                });
            }
        }

        /// <summary>
        /// Enviar recordatorio de reservaci√≥n por email
        /// </summary>
        /// <param name="id">ID de la reservaci√≥n</param>
        /// <returns>Confirmaci√≥n de env√≠o</returns>
        /// <response code="200">Recordatorio enviado exitosamente</response>
        /// <response code="404">Reservaci√≥n no encontrada</response>
        [HttpPost("{id:int}/enviar-recordatorio")]
        [SwaggerOperation(
            Summary = "Enviar recordatorio de reservaci√≥n",
            Description = "Env√≠a un recordatorio de reservaci√≥n al email del cliente",
            OperationId = "Reservacion.EnviarRecordatorio",
            Tags = new[] { "Operaciones de Reservaci√≥n" }
        )]
        [ProducesResponseType(typeof(ApiResponse), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(ProblemDetails), StatusCodes.Status404NotFound)]
        public Task<ActionResult<ApiResponse>> EnviarRecordatorioReservacion(int id)
        {
            try
            {
                _logger.LogInformation("üìß Enviando recordatorio de reservaci√≥n {ReservacionId}", id);

                // Temporalmente comentado hasta implementar notificaciones
                // await _reservacionService.EnviarRecordatorioReservacionAsync(id);
                
                _logger.LogInformation("‚úÖ Recordatorio de reservaci√≥n {ReservacionId} enviado", id);
                
                var result = Ok(new ApiResponse
                {
                    Success = true,
                    Message = "Recordatorio enviado exitosamente"
                });

                return Task.FromResult<ActionResult<ApiResponse>>(result);
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogWarning("‚ö†Ô∏è Error al enviar recordatorio: {Mensaje}", ex.Message);
                var result = NotFound(new ProblemDetails
                {
                    Title = "Reservaci√≥n no encontrada",
                    Detail = ex.Message,
                    Status = StatusCodes.Status404NotFound
                });

                return Task.FromResult<ActionResult<ApiResponse>>(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al enviar recordatorio de reservaci√≥n {ReservacionId}", id);
                var result = StatusCode(StatusCodes.Status500InternalServerError);
                return Task.FromResult<ActionResult<ApiResponse>>(result);
            }
        }

        // ============================================================================
        // REPORTES Y ESTAD√çSTICAS
        // ============================================================================

        /// <summary>
        /// Obtener estad√≠sticas de reservaciones
        /// </summary>
        /// <param name="fechaInicio">Fecha de inicio</param>
        /// <param name="fechaFin">Fecha de fin</param>
        /// <returns>Estad√≠sticas de reservaciones</returns>
        /// <response code="200">Estad√≠sticas obtenidas</response>
        [HttpGet("estadisticas")]
        [Authorize(Roles = "Administrador,Recepcion")]
        [SwaggerOperation(
            Summary = "Estad√≠sticas de reservaciones",
            Description = "Obtiene estad√≠sticas detalladas de reservaciones para un per√≠odo",
            OperationId = "Reservacion.Estadisticas",
            Tags = new[] { "Reportes" }
        )]
        [ProducesResponseType(typeof(EstadisticasReservacionResponse), StatusCodes.Status200OK)]
        public async Task<ActionResult<EstadisticasReservacionResponse>> GetEstadisticasReservaciones([FromQuery] DateTime fechaInicio, [FromQuery] DateTime fechaFin)
        {
            try
            {
                var estadisticas = await _reservacionService.GetEstadisticasReservasAsync(fechaInicio, fechaFin);
                
                // Mapear a la respuesta esperada por el controlador
                var response = new EstadisticasReservacionResponse
                {
                    FechaInicio = estadisticas.FechaInicio,
                    FechaFin = estadisticas.FechaFin,
                    TotalReservaciones = estadisticas.TotalReservas,
                    ReservacionesCanceladas = estadisticas.ReservasCanceladas,
                    ReservacionesCompletadas = estadisticas.ReservasCompletadas,
                    TasaOcupacion = (double)estadisticas.PorcentajeOcupacion,
                    HoraPico = estadisticas.ReservasPorHora.OrderByDescending(x => x.Value).FirstOrDefault().Key ?? "N/A",
                    ReservacionesPorDia = new List<ReservacionDiariaItem>()
                };
                
                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al obtener estad√≠sticas de reservaciones");
                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }

        /// <summary>
        /// Obtener disponibilidad de mesas
        /// </summary>
        /// <param name="fecha">Fecha a consultar</param>
        /// <param name="hora">Hora a consultar</param>
        /// <returns>Disponibilidad de mesas</returns>
        /// <response code="200">Disponibilidad obtenida</response>
        [HttpGet("disponibilidad")]
        [SwaggerOperation(
            Summary = "Consultar disponibilidad de mesas",
            Description = "Obtiene la disponibilidad de mesas para una fecha y hora espec√≠fica",
            OperationId = "Reservacion.DisponibilidadMesas",
            Tags = new[] { "Consulta de Disponibilidad" }
        )]
        [ProducesResponseType(typeof(DisponibilidadMesasResponse), StatusCodes.Status200OK)]
        public async Task<ActionResult<DisponibilidadMesasResponse>> GetDisponibilidadMesas([FromQuery] DateTime fecha, [FromQuery] TimeSpan hora)
        {
            try
            {
                var fechaHora = fecha.Date.Add(hora);
                var mesasDisponibles = await _reservacionService.BuscarMesasDisponiblesParaReservaAsync(fechaHora, 4, 120);
                
                var response = new DisponibilidadMesasResponse
                {
                    FechaHora = fechaHora,
                    Mesas = mesasDisponibles.Select(m => new MesaDisponibilidad
                    {
                        MesaId = m.MesaID,
                        Numero = m.NumeroMesa,
                        Capacidad = m.Capacidad,
                        Disponible = true,
                        MotivoNoDisponible = null
                    }).ToList()
                };
                
                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al obtener disponibilidad de mesas");
                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }

        // ============================================================================
        // CLASES DE REQUEST Y RESPONSE
        // ============================================================================

        public class CreateReservacionGrupalRequest
        {
            /// <summary>
            /// IDs de las mesas a reservar
            /// </summary>
            public List<int> MesasIds { get; set; } = new();

            /// <summary>
            /// Fecha y hora de la reservaci√≥n
            /// </summary>
            public DateTime FechaHora { get; set; }

            /// <summary>
            /// Datos del cliente
            /// </summary>
            public DatosClienteReservacion Cliente { get; set; } = new();

            /// <summary>
            /// Observaciones especiales
            /// </summary>
            public string? Observaciones { get; set; }
        }

        public class CancelarReservacionRequest
        {
            /// <summary>
            /// Motivo de la cancelaci√≥n
            /// </summary>
            public string Motivo { get; set; } = string.Empty;
        }

        public class DatosClienteReservacion
        {
            public string Nombre { get; set; } = string.Empty;
            public string Telefono { get; set; } = string.Empty;
            public string Email { get; set; } = string.Empty;
        }

        public class EstadisticasReservacionResponse
        {
            public DateTime FechaInicio { get; set; }
            public DateTime FechaFin { get; set; }
            public int TotalReservaciones { get; set; }
            public int ReservacionesCanceladas { get; set; }
            public int ReservacionesCompletadas { get; set; }
            public double TasaOcupacion { get; set; }
            public string HoraPico { get; set; } = string.Empty;
            public List<ReservacionDiariaItem> ReservacionesPorDia { get; set; } = new();
        }

        public class ReservacionDiariaItem
        {
            public DateTime Fecha { get; set; }
            public int Cantidad { get; set; }
            public int MesasOcupadas { get; set; }
        }

        public class DisponibilidadMesasResponse
        {
            public DateTime FechaHora { get; set; }
            public List<MesaDisponibilidad> Mesas { get; set; } = new();
        }

        public class MesaDisponibilidad
        {
            public int MesaId { get; set; }
            public int Numero { get; set; }
            public int Capacidad { get; set; }
            public bool Disponible { get; set; }
            public string? MotivoNoDisponible { get; set; }
        }
    }
}